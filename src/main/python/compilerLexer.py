# Generated from d:/Users/Usuario/Documents/DHS(Calvo)/DHS2025-calvo-/src/main/python/compiler.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,4,25,
        135,8,25,11,25,12,25,136,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,33,1,33,3,33,177,8,33,1,33,1,33,1,33,5,33,182,8,33,10,
        33,12,33,185,9,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,
        37,1,37,1,37,0,0,38,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,
        21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,
        43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,
        65,31,67,32,69,33,71,34,73,35,75,36,1,0,3,2,0,65,90,97,122,1,0,48,
        57,3,0,9,10,13,13,32,32,200,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,
        5,81,1,0,0,0,7,83,1,0,0,0,9,85,1,0,0,0,11,87,1,0,0,0,13,89,1,0,0,
        0,15,91,1,0,0,0,17,93,1,0,0,0,19,95,1,0,0,0,21,97,1,0,0,0,23,99,
        1,0,0,0,25,101,1,0,0,0,27,103,1,0,0,0,29,105,1,0,0,0,31,107,1,0,
        0,0,33,109,1,0,0,0,35,111,1,0,0,0,37,113,1,0,0,0,39,116,1,0,0,0,
        41,119,1,0,0,0,43,122,1,0,0,0,45,125,1,0,0,0,47,128,1,0,0,0,49,131,
        1,0,0,0,51,134,1,0,0,0,53,138,1,0,0,0,55,142,1,0,0,0,57,149,1,0,
        0,0,59,152,1,0,0,0,61,157,1,0,0,0,63,161,1,0,0,0,65,167,1,0,0,0,
        67,176,1,0,0,0,69,186,1,0,0,0,71,190,1,0,0,0,73,192,1,0,0,0,75,195,
        1,0,0,0,77,78,7,0,0,0,78,2,1,0,0,0,79,80,7,1,0,0,80,4,1,0,0,0,81,
        82,5,40,0,0,82,6,1,0,0,0,83,84,5,41,0,0,84,8,1,0,0,0,85,86,5,123,
        0,0,86,10,1,0,0,0,87,88,5,125,0,0,88,12,1,0,0,0,89,90,5,91,0,0,90,
        14,1,0,0,0,91,92,5,93,0,0,92,16,1,0,0,0,93,94,5,59,0,0,94,18,1,0,
        0,0,95,96,5,44,0,0,96,20,1,0,0,0,97,98,5,61,0,0,98,22,1,0,0,0,99,
        100,5,43,0,0,100,24,1,0,0,0,101,102,5,45,0,0,102,26,1,0,0,0,103,
        104,5,42,0,0,104,28,1,0,0,0,105,106,5,47,0,0,106,30,1,0,0,0,107,
        108,5,37,0,0,108,32,1,0,0,0,109,110,5,60,0,0,110,34,1,0,0,0,111,
        112,5,62,0,0,112,36,1,0,0,0,113,114,5,60,0,0,114,115,5,61,0,0,115,
        38,1,0,0,0,116,117,5,62,0,0,117,118,5,61,0,0,118,40,1,0,0,0,119,
        120,5,61,0,0,120,121,5,61,0,0,121,42,1,0,0,0,122,123,5,33,0,0,123,
        124,5,61,0,0,124,44,1,0,0,0,125,126,5,38,0,0,126,127,5,38,0,0,127,
        46,1,0,0,0,128,129,5,124,0,0,129,130,5,124,0,0,130,48,1,0,0,0,131,
        132,5,33,0,0,132,50,1,0,0,0,133,135,3,3,1,0,134,133,1,0,0,0,135,
        136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,52,1,0,0,0,138,139,
        5,105,0,0,139,140,5,110,0,0,140,141,5,116,0,0,141,54,1,0,0,0,142,
        143,5,100,0,0,143,144,5,111,0,0,144,145,5,117,0,0,145,146,5,98,0,
        0,146,147,5,108,0,0,147,148,5,101,0,0,148,56,1,0,0,0,149,150,5,105,
        0,0,150,151,5,102,0,0,151,58,1,0,0,0,152,153,5,101,0,0,153,154,5,
        108,0,0,154,155,5,115,0,0,155,156,5,101,0,0,156,60,1,0,0,0,157,158,
        5,102,0,0,158,159,5,111,0,0,159,160,5,114,0,0,160,62,1,0,0,0,161,
        162,5,119,0,0,162,163,5,104,0,0,163,164,5,105,0,0,164,165,5,108,
        0,0,165,166,5,101,0,0,166,64,1,0,0,0,167,168,5,114,0,0,168,169,5,
        101,0,0,169,170,5,116,0,0,170,171,5,117,0,0,171,172,5,114,0,0,172,
        173,5,110,0,0,173,66,1,0,0,0,174,177,3,1,0,0,175,177,5,95,0,0,176,
        174,1,0,0,0,176,175,1,0,0,0,177,183,1,0,0,0,178,182,3,1,0,0,179,
        182,3,3,1,0,180,182,5,95,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,
        180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,
        68,1,0,0,0,185,183,1,0,0,0,186,187,7,2,0,0,187,188,1,0,0,0,188,189,
        6,34,0,0,189,70,1,0,0,0,190,191,9,0,0,0,191,72,1,0,0,0,192,193,5,
        43,0,0,193,194,5,43,0,0,194,74,1,0,0,0,195,196,5,45,0,0,196,197,
        5,45,0,0,197,76,1,0,0,0,5,0,136,176,181,183,1,6,0,0
    ]

class compilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    CA = 5
    CC = 6
    PYC = 7
    COMA = 8
    ASIG = 9
    SUMA = 10
    RESTA = 11
    MULT = 12
    DIV = 13
    MOD = 14
    MENOR = 15
    MAYOR = 16
    MENOREQ = 17
    MAYOREQ = 18
    EQUAL = 19
    NEQUAL = 20
    AND = 21
    OR = 22
    NOT = 23
    NUMERO = 24
    INT = 25
    DOUBLE = 26
    IF = 27
    ELSE = 28
    FOR = 29
    WHILE = 30
    RETURN = 31
    ID = 32
    WS = 33
    OTRO = 34
    INCREMENTO = 35
    DECREMENTO = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'='", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
            "'=='", "'!='", "'&&'", "'||'", "'!'", "'int'", "'double'", 
            "'if'", "'else'", "'for'", "'while'", "'return'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "CA", "CC", "PYC", "COMA", "ASIG", 
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "MENOR", "MAYOR", "MENOREQ", 
            "MAYOREQ", "EQUAL", "NEQUAL", "AND", "OR", "NOT", "NUMERO", 
            "INT", "DOUBLE", "IF", "ELSE", "FOR", "WHILE", "RETURN", "ID", 
            "WS", "OTRO", "INCREMENTO", "DECREMENTO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "CA", "CC", 
                  "PYC", "COMA", "ASIG", "SUMA", "RESTA", "MULT", "DIV", 
                  "MOD", "MENOR", "MAYOR", "MENOREQ", "MAYOREQ", "EQUAL", 
                  "NEQUAL", "AND", "OR", "NOT", "NUMERO", "INT", "DOUBLE", 
                  "IF", "ELSE", "FOR", "WHILE", "RETURN", "ID", "WS", "OTRO", 
                  "INCREMENTO", "DECREMENTO" ]

    grammarFileName = "compiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


